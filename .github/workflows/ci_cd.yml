name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: |
          cd projet/ml_app
          pip install -r requirements.txt

      # Étape 4 : Créer un répertoire pour les artefacts MLflow
      - name: Set up artifact directory
        run: |
          mkdir -p /tmp/mlflow_artifacts
          chmod -R 777 /tmp/mlflow_artifacts

      # Étape 5 : Exécuter les tests unitaires
      - name: Run unit tests
        run: |
          cd projet/ml_app
          python -m unittest discover tests  # Découvre et exécute les tests

      # Étape 6 : Entraîner le modèle et l'enregistrer avec MLflow
      - name: Train model and log with MLflow
        run: |
          cd projet/ml_app
          # Assurer que MLflow utilise le répertoire local pour les artefacts
          python train.py  # Script d'entraînement avec intégration MLflow

      # Étape 7 : Valider le modèle avec MLflow
      - name: Validate model with MLflow
        run: |
          cd projet/ml_app
          python validate_model.py  # Validation du modèle enregistré avec MLflow

      # Étape 8 : Construire l'image Docker
      - name: Build Docker image
        run: |
          cd projet
          docker build -t my_ml_app ./ml_app  # Crée une image Docker pour l'application

      # Étape 9 : Se connecter à Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Étape 10 : Taguer l'image Docker
      - name: Tag Docker image
        run: docker tag my_ml_app:latest ${{ secrets.DOCKER_USERNAME }}/my_ml_app:latest

      # Étape 11 : Pousser l'image sur Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my_ml_app:latest  # Pousse l'image vers Docker Hub

      # Étape 12 : Déployer l'application
      - name: Deploy the application
        run: |
          echo "Deploying the application..."
          docker run -d --name my_ml_app_container -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/my_ml_app:latest  # Lance le container
